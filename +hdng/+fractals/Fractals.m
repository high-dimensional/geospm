% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
%                                                                         %
%  This source file is part of GeoSPM:                                    %
%  https://github.com/high-dimensional/geospm                             %
%                                                                         %
%  Copyright (C) 2019,                                                    %
%  High-Dimensional Neurology Group, University College London            %
%                                                                         %
%  See geospm/LICENSE.txt for license details.                            %
%  See geospm/AUTHORS.txt for the list of GeoSPM authors.                 %
%                                                                         %
%  SPDX-License-Identifier: GPL-3.0-only                                  %
%                                                                         %
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %

classdef Fractals < matlab.mixin.Copyable
    %Fractals Summary of this class goes here
    %   Detailed explanation goes here
    
    properties (Constant)
        Zero = 0
        
        KochCurve = hdng.fractals.Fractal(...
              'Koch Curve', ...
              hdng.fractals.substitutions.Generator( ...
                  {'triangular', ...
                  }, ...
                  {
                      { 0   0 0 0; 0  60 0 0; 0 300 0 0; 0  0 0 0; }
                  }), ...
              { hdng.fractals.Parameter('levels', 3); ...
              });
        
        KochSnowflake = hdng.fractals.Fractal(...
              'Koch Snowflake', ...
              hdng.fractals.Fractals.KochCurve.generator, ...
              { hdng.fractals.Parameter('levels', 3); ...
                hdng.fractals.Parameter('seed_sequence', { 0  60 0 0; 0 300 0 0; 0 180 0 0;});
              });
        
        KochAntisnowflake = hdng.fractals.Fractal(...
              'Koch Antisnowflake', ...
              hdng.fractals.Fractals.KochCurve.generator, ...
              { hdng.fractals.Parameter('levels', 3); ...
                hdng.fractals.Parameter('seed_sequence', { 0  0 1 0; 0 240 1 0; 0 120 1 0;});
              });
          
        
        GosperCurve = hdng.fractals.Fractal(...
              'Gosper Curve', ...
              hdng.fractals.substitutions.Generator( ...
                  {'triangular', ...
                  }, ...
                  {
                      { 0 0 0 0; 0 60 1 1; 0 180 1 1; 0 120 0 0; 0 0 0 0; 0 0 0 0; 0 300 1 1; }
                  }), ...
              { hdng.fractals.Parameter('levels', 3); ...
              });
        
        ChristmasTree = hdng.fractals.Fractal(...
              'Christmas Tree Curves', ...
              hdng.fractals.substitutions.Generator( ...
                  {'triangular', ...
                   'scale_base', sqrt(3)
                  }, ...
                  {
                      { 1 30 1 1; 0 120 0 0; 0 0 0 1; 0 240 0 1; 1 330 1 0; }
                  }), ...
              { hdng.fractals.Parameter('levels', 3); ...
                hdng.fractals.Parameter('seed_sequence', { 2 0 0 0;});
              });
          
        VentrellaRoot4 = hdng.fractals.Fractal(...
              'Ventrella Root 4', ...
              hdng.fractals.substitutions.Generator( ...
                  {'square', ...
                   'scale_base', sqrt(2)
                  }, ...
                  {
                      { 0 90 0 0; 1 315 1 1; 0 0 0 0; }
                  }), ...
              { hdng.fractals.Parameter('levels', 3); ...
                hdng.fractals.Parameter('seed_sequence', { 0 0 0 0;});
              });
          
        SerpinskiArrowheadCurve = hdng.fractals.Fractal(...
              'Serpinski Arrowhead Curve', ...
              hdng.fractals.substitutions.Generator( ...
                  {'triangular', ...
                   'scale_base', 1
                  }, ...
                  {
                      { 0 60 1 0; 0 0 0 0; 0 300 1 0; }
                  }), ...
              { hdng.fractals.Parameter('levels', 3); ...
                hdng.fractals.Parameter('seed_sequence', { 2 0 0 0;});
              });
          
        Quartet = hdng.fractals.Fractal(...
              'Quartet', ...
              hdng.fractals.substitutions.Generator( ...
                  {'square', ...
                   'scale_base', 1
                  }, ...
                  {
                      { 0 90 1 1; 0 90 0 0; 0 0 0 0; 0 270 1 1; 0 0 0 0; }
                  }), ...
              { hdng.fractals.Parameter('levels', 3); ...
                hdng.fractals.Parameter('seed_sequence', { 0 0 0 0;});
              });
          
        VentrellaRoot7 = hdng.fractals.Fractal(...
              'Ventrella Root 7', ...
              hdng.fractals.substitutions.Generator( ...
                  {'triangular', ...
                   'scale_base', 1
                  }, ...
                  {
                      { 0 240 0 1; 0 0 0 1; 0 0 1 0; 0 0 0 1; 0 120 0 1; 0 120 1 0; 0 0 1 0; }
                  }), ...
              { hdng.fractals.Parameter('levels', 3); ...
                hdng.fractals.Parameter('seed_sequence', { 0 0 0 0;});
              });
          
        VentrellaRoot8 = hdng.fractals.Fractal(...
              'Ventrella Root 8', ...
              hdng.fractals.substitutions.Generator( ...
                  {'square', ...
                   'scale_base', sqrt(2)
                  }, ...
                  {
                      { 1 135 0 0; 1 45 0 0; 1 315 0 0; 0 0 1 1; 0 90 1 1; }
                  }), ...
              { hdng.fractals.Parameter('levels', 3); ...
                hdng.fractals.Parameter('seed_sequence', { 0 0 0 0;});
              });
         
         SnowflakeSweep = hdng.fractals.Fractal(...
              'Snowflake Sweep Curve', ...
              hdng.fractals.substitutions.Generator( ...
                  {'triangular', ...
                   'scale_base', sqrt(3)
                  }, ...
                  {
                      { 0 60 1 0; 0 60 0 1; 0 0 0 1; 0 300 0 1; 1 210 1 1; 0 0 1 0; 0 0 0 1; }
                  }), ...
              { hdng.fractals.Parameter('levels', 3); ...
                hdng.fractals.Parameter('seed_sequence', { 0 0 0 0;});
              });
          
         UnravelledCarpet = hdng.fractals.Fractal(...
              'Unravelled Carpet Curve', ...
              hdng.fractals.substitutions.Generator( ...
                  {'triangular', ...
                   'scale_base', 2.0 * sinpi(1/3.0)
                  }, ...
                  {
                      { 1 90 0 1; 0 0 1 1; 0 0 0 0; 0 240 0 0; 0 240 1 1; 0 0 1 1; 0 0 0 0; }
                  }), ...
              { hdng.fractals.Parameter('levels', 3); ...
                hdng.fractals.Parameter('seed_sequence', { 0 0 0 0;});
              });
          
        VentrellaRoot13 = hdng.fractals.Fractal(...
              'Ventrella Root 13', ...
              hdng.fractals.substitutions.Generator( ...
                  {'square', ...
                   'scale_base', sqrt(2)
                  }, ...
                  {
                      { 0 90 1 1; 0 90 0 0; 0 180 1 1; 0 90 0 0; 0 0 0 0; 0 90 1 1; 0 0 0 0; 0 270 0 0; 1 315 1 1; 0 0 0 0; }
                  }), ...
              { hdng.fractals.Parameter('levels', 3); ...
                hdng.fractals.Parameter('seed_sequence', { 0 0 0 0;});
              });
        
        VentrellaRoot16 = hdng.fractals.Fractal(...
              'Ventrella Root 16', ...
              hdng.fractals.substitutions.Generator( ...
                  {'square', ...
                   'scale_base', 1
                  }, ...
                  {
                      { 0 0 0 0; 0 90 1 1; 0 90 0 0; 0 90 0 0; 0 90 0 0; 0 0 1 0; 0 0 1 0; 0 270 0 1; 0 180 0 1; 0 270 1 0; 0 270 1 0; 0 0 1 0; 0 90 0 1; 0 0 0 0; 0 270 1 1; 0 270 1 0; }
                  }), ...
              { hdng.fractals.Parameter('levels', 3); ...
                hdng.fractals.Parameter('seed_sequence', { 0 0 0 0;});
              });
    end
    
    methods (Access=private)
        function obj = Fractals()
        end
    end
end
